#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>

#define ZMK_POINTING_DEFAULT_SCRL_VAL 100
#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
    tapping-term-ms = <500>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        quotation {
            bindings = <&kp SQT>;
            key-positions = <19 20>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        scroll_up_down: scroll_up_down {
            compatible = "zmk,behavior-sensor-rotate-var";
            label = "SCROLL_UP_DOWN";
            #sensor-binding-cells = <2>;
            bindings = <&msc SCRL_UP>, <&msc SCRL_DOWN>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&lt 4 Q           &kp W         &kp E     &kp R       &kp T                                            &kp Y        &kp U  &kp I      &kp O    &kp P
&mt LCTRL A       &kp S         &kp D     &kp F       &kp G        &kp LS(LG(S))        &kp MINUS      &kp H        &kp J  &kp K      &kp L    &mt RCTRL SEMICOLON
&mt LEFT_SHIFT Z  &kp X         &kp C     &kp V       &kp B        &tog 2               &kp EQUAL      &kp N        &kp M  &kp COMMA  &kp DOT  &mt RIGHT_SHIFT SLASH
&kp TAB           &kp LEFT_ALT  &kp LWIN  &kp ESCAPE  &lt 3 SPACE  &lt 2 BACKSPACE      &kp RIGHT_WIN  &lt 1 ENTER                             &kp RIGHT_ALT
            >;

            sensor-bindings = <&scroll_up_downj>;
        };

        FUNCTION {
            bindings = <
&kp MINUS  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp PLUS                              &kp F1  &kp F2  &kp F3  &kp F4  &kp F5
&kp SLASH  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp ASTERISK  &tog 0         &kp F13  &kp F6  &kp F7  &kp F8  &kp F9  &kp F10
&kp N0     &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp PERIOD    &kp EQUAL      &trans   &trans  &trans  &trans  &trans  &kp F11
&trans     &trans        &trans        &trans        &trans        &trans         &trans   &trans                          &kp F12
            >;
        };

        NUM {
            bindings = <
&kp EXCLAMATION  &kp AT_SIGN      &kp HASH          &kp DOLLAR       &kp PERCENT                                         &kp CARET  &kp AMPERSAND  &kp TILDE  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&kp LCTRL        &kp LESS_THAN    &kp GREATER_THAN  &kp PLUS         &kp ASTERISK  &trans      &kp UNDERSCORE            &kp MINUS  &kp EQUAL      &kp HASH   &kp LBKT              &kp RBKT
&kp LEFT_SHIFT   &kp KP_NUMBER_1  &kp KP_NUMBER_2   &kp KP_NUMBER_3  &kp PERIOD    &tog 0      &kp LS(NON_US_BACKSLASH)  &kp TILDE  &kp GRAVE      &kp SQT    &kp LEFT_BRACE        &kp RIGHT_BRACE
&trans           &trans           &trans            &trans           &trans        &trans      &trans                    &trans                                                     &kp PIPE
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))         &kp LG(LS(NUMBER_4))  &kp LC(TAB)              &kp LG(LS(N5))                      &trans  &trans    &trans          &trans     &trans
&kp HOME        &kp LEFT_ARROW          &kp UP_ARROW          &kp RIGHT_ARROW          &kp END         &trans      &trans  &trans  &mkp MB1  &kp UP_ARROW    &mkp MB2   &trans
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &kp DOWN              &kp LG(LS(RIGHT_ARROW))  &trans          &trans      &trans  &trans  &kp LEFT  &kp DOWN_ARROW  &kp RIGHT  &trans
&trans          &trans                  &trans                &trans                   &trans          &trans      &trans  &trans                                       &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        layer_4 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
